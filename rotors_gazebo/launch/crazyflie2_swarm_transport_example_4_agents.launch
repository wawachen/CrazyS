<?xml version="1.0"?>
<launch>
  <!-- Payload parameters -->
  <arg name="cable_length" default="0.2" /> <!-- [m] -->
  <arg name="cable_radius" default="0.005" /> <!-- [m] -->
  <arg name="cable_mass" default="0.00001" /> <!-- [kg] -->
  <arg name="x_payload" default="0.2"/> <!-- [m] -->
  <arg name="y_payload" default="0.15"/> <!-- [m] -->
  <arg name="z_payload" default="0.03"/> <!-- [m] -->
  <arg name="payload_mass" default="0.0001"/> <!-- [kg] -->

  <!-- Enables the Internal Model Controller disabling the Mellinger and the Position ones -->
  <arg name="enable_internal_model_controller" default="true"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="mav_name" default="crazyflie2" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="enable_state_estimator" default="false"/>
  <arg name="enable_mellinger_controller" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name)_crazyflie.world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <!-- This code spawns the contents of the .xacro file -->
  <group ns="$(arg mav_name)">

    <include file="$(find rotors_gazebo)/launch/spawn_mav_crazyflie.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/crazyflie2_with_cable.xacro" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>

      <!-- Cable and payload characteristics -->
      <arg name="cable_length" value="$(arg cable_length)"/>
      <arg name="cable_radius" value="$(arg cable_radius)"/>
      <arg name="cable_mass" value="$(arg cable_mass)"/>
      <arg name="x_payload" value="$(arg x_payload)"/>
      <arg name="y_payload" value="$(arg y_payload)"/>
      <arg name="z_payload" value="$(arg z_payload)"/>
      <arg name="payload_mass" value="$(arg payload_mass)"/>

      <!-- Initial position of the center of mass of the payload -->
      <arg name="x" value="0.0"/>
      <arg name="y" value="0.0"/>
      <arg name="z" value="0.3"/>

      <!-- Initial orientation of the robot -->
      <arg name="roll" value="0.0"/>
      <arg name="pitch" value="0.0"/>
      <arg name="yaw" value="0.0"/>

      <!-- Initial joint values for the robot -->
      <arg name="j_uav1_x" value="0.5"/>
      <arg name="j_uav2_x" value="0.5"/>
      <arg name="j_bar1_x" value="-0.5"/>
      <arg name="j_bar2_x" value="-0.5"/>
      <arg name="j_uav1_y" value="0.0"/>
      <arg name="j_uav2_y" value="0.0"/>
      <arg name="j_bar1_y" value="0.0"/>
      <arg name="j_bar2_y" value="0.0"/>

      <arg name="j_uav3_x" value="0.0"/>
      <arg name="j_uav4_x" value="0.0"/>
      <arg name="j_bar3_x" value="0.0"/>
      <arg name="j_bar4_x" value="0.0"/>
      <arg name="j_uav3_y" value="0.0"/>
      <arg name="j_uav4_y" value="0.0"/>
      <arg name="j_bar3_y" value="0.0"/>
      <arg name="j_bar4_y" value="0.0"/>

    </include>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

 <group ns="$(arg mav_name)_1">
  <!-- CRAZYFLIE_1 -->
   <!-- The Crazyflie position controller -->
   <node name="position_controller_node" pkg="rotors_control" type="position_controller_node" output="screen">
      <!-- Enabling internal model controller-->
      <param name="enable_internal_model_controller" value="$(arg enable_internal_model_controller)"  />
      <!-- Crazyflie file parameters used within the Internal Model Controller controller -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_parameters.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <!-- Loading Internal Model Controller's parameters -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_internal_model_controller.yaml" />
   </node>
   <!-- Enable/Disable the trajectory generator - If the position_controller is activated, the hovering_example will be executed,
        otherwise the spline generator and the Mellinger's controller will be run-->
   <node name="hovering_example_spline_swarm" pkg="rotors_gazebo" type="hovering_example_spline_swarm" output="screen" >
     <rosparam command="load" file="$(find rotors_gazebo)/resource/spline_trajectory.yaml" />
   </node>

  </group>

  <!-- CRAZYFLIE_2 -->
  <group ns="$(arg mav_name)_2">
   <!-- The Crazyflie position controller -->
   <node name="position_controller_node" pkg="rotors_control" type="position_controller_node" output="screen">
      <!-- Enabling internal model controller-->
      <param name="enable_internal_model_controller" value="$(arg enable_internal_model_controller)"  />
      <!-- Crazyflie file parameters used within the Internal Model Controller controller -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_parameters.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <!-- Loading Internal Model Controller's parameters -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_internal_model_controller.yaml" />
   </node>
   <!-- Enable/Disable the trajectory generator - If the position_controller is activated, the hovering_example will be executed,
        otherwise the spline generator and the Mellinger's controller will be run-->
   <node name="hovering_example_spline_swarm" pkg="rotors_gazebo" type="hovering_example_spline_swarm" output="screen" >
     <rosparam command="load" file="$(find rotors_gazebo)/resource/spline_trajectory.yaml" />
   </node>
   
  </group>

  <!-- CRAZYFLIE_3 -->
  <group ns="$(arg mav_name)_3">
   <!-- The Crazyflie position controller -->
   <node name="position_controller_node" pkg="rotors_control" type="position_controller_node" output="screen">
      <!-- Enabling internal model controller-->
      <param name="enable_internal_model_controller" value="$(arg enable_internal_model_controller)"  />
      <!-- Crazyflie file parameters used within the Internal Model Controller controller -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_parameters.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <!-- Loading Internal Model Controller's parameters -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_internal_model_controller.yaml" />
   </node>
   <!-- Enable/Disable the trajectory generator - If the position_controller is activated, the hovering_example will be executed,
        otherwise the spline generator and the Mellinger's controller will be run-->
   <node name="hovering_example_spline_swarm" pkg="rotors_gazebo" type="hovering_example_spline_swarm" output="screen" >
     <rosparam command="load" file="$(find rotors_gazebo)/resource/spline_trajectory.yaml" />
   </node>
   
  </group>

  <!-- CRAZYFLIE_4 -->
  <group ns="$(arg mav_name)_4">
   <!-- The Crazyflie position controller -->
   <node name="position_controller_node" pkg="rotors_control" type="position_controller_node" output="screen">
      <!-- Enabling internal model controller-->
      <param name="enable_internal_model_controller" value="$(arg enable_internal_model_controller)"  />
      <!-- Crazyflie file parameters used within the Internal Model Controller controller -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_parameters.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <!-- Loading Internal Model Controller's parameters -->
      <rosparam command="load" file="$(find rotors_gazebo)/resource/crazyflie_internal_model_controller.yaml" />
   </node>
   <!-- Enable/Disable the trajectory generator - If the position_controller is activated, the hovering_example will be executed,
        otherwise the spline generator and the Mellinger's controller will be run-->
   <node name="hovering_example_spline_swarm" pkg="rotors_gazebo" type="hovering_example_spline_swarm" output="screen" >
     <rosparam command="load" file="$(find rotors_gazebo)/resource/spline_trajectory.yaml" />
   </node>
  </group>


</launch>